@page
@model SafeStreet.Pages.IndexModel
@{
    ViewData["Title"] = "Crime Data Analysis";
}
<header>
    <hr>
    <div class="container my-5">
        <h1 class="text-center mb-5" style="color: black; font-family: 'Poppins', sans-serif; font-weight: bold;">Welcome to SafeStreet Crime Data Analysis</h1>
    </div>
</header>


<hr>

<main id="mainContent">
    <h3 class="text-center mb-5" style="color: black; font-family: 'Poppins', sans-serif; font-weight: bold;">Search in the map and scroll below to view safety ratings</h3>
</main>


    <div class="flex-container">
        <!-- Map Section -->
        <section id="map-section" aria-labelledby="mapSectionTitle">
            <div id="map-container">
                <input id="search-box" type="text" placeholder="Search for desired location..." value="@Model.SearchNeighborhood" aria-label="Search for desired location" />
                <div id="map" tabindex="0" aria-label="Interactive map showing crime data"></div>
            </div>
        </section>
         <hr>
        <!-- Stats Section -->
        <section id="stats-section" aria-labelledby="statsSectionTitle">
        <h3 class="text-center mb-5" style="color: black; font-family: 'Poppins', sans-serif; font-weight: bold;" id="statsSectionTitle">Crime Statistics</h3>
        <hr />
            <div class="cards-container">
                <!-- Safety Score Section -->
                <article class="card safety-score-card" aria-labelledby="safetyScoreTitle">
                    <h3 id="safetyScoreTitle"><i class="fas fa-shield-alt" aria-hidden="true"></i> Neighborhood Safety Score</h3>
                    <div class="circle-score" id="circleScore" aria-live="polite" aria-label="Current neighborhood safety score">
                        <span id="safetyScore">--</span>
                    </div>
                    <progress class="score-bar" id="scoreProgress" aria-valuemin="0" aria-valuemax="100" aria-valuenow="50">
                        50%
                    </progress>
                    <div class="score-labels">
                        <span>High Risk</span>
                        <span>Moderate</span>
                        <span>Very Safe</span>
                    </div>
                </article>

                <!-- Total Crime Section -->
                <article class="card crime-total-card" aria-labelledby="totalCrimeTitle">
                    <h3 id="totalCrimeTitle">Total Crime Nearby (1 km)</h3>
                    <table class="crime-total-table">
                        <caption>Table showing total crimes in the last year by time period</caption>
                        <thead>
                            <tr>
                                <th scope="col">Time Period</th>
                                <th scope="col">Crime Numbers</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td scope="row">Last 3 Months</td>
                                <td id="totalLast3Months">-</td>
                            </tr>
                            <tr>
                                <td scope="row">Last 6 Months</td>
                                <td id="totalLast6Months">-</td>
                            </tr>
                            <tr>
                                <td scope="row">Last 9 Months</td>
                                <td id="totalLast9Months">-</td>
                            </tr>
                            <tr>
                                <td scope="row">Last 1 Year</td>
                                <td id="totalLast1Year">-</td>
                            </tr>
                        </tbody>
                    </table>
                </article>
            </div>
            <hr>
            <!-- Crime Type Section -->
            <article class="crime-type-card" aria-labelledby="crimeTypeTitle">
            <h3 class="text-center mb-5" style="color: black; font-family: 'Poppins', sans-serif; font-weight: bold;" id="crimeTypeTitle">Crime Type</h3>

         <hr>
                <table id="typeStatsTable">
                    <caption>Table showing crimes categorized by type</caption>
                    <thead>
                        <tr>
                            <th scope="col">Incidents</th>
                            <th scope="col">Last 3 Months</th>
                            <th scope="col">Last 6 Months</th>
                            <th scope="col">Last 9 Months</th>
                            <th scope="col">Last 1 Year</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Rows will be dynamically inserted here -->
                    </tbody>
                </table>
            </article>
        </section>
    </div>

    <!-- Action Buttons -->
    <div class="action-buttons text-center mt-5">
        <a asp-page="/UserRatings/Create" class="btn btn-red btn-lg" aria-label="Submit a safety rating">
            <i class="fas fa-edit" aria-hidden="true"></i> SUBMIT A SAFETY RATING
        </a>
        <a asp-page="/CrimeMap" class="btn btn-red btn-lg" aria-label="View ratings by neighborhood">
            <i class="fas fa-map-marked-alt" aria-hidden="true"></i> VIEW RATINGS BY NEIGHBORHOOD
        </a>
    </div>

</main>


@section Scripts {
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBvQ1QHv3HHDe5b6JGYQvWgGjepIWw20Pg&libraries=places&callback=initMap" async defer></script>
    <script>
        let map, searchBox, geocoder;

        function initMap() {
            const initialLocation = { lat: 39.1031, lng: -84.5120 }; // Default to Cincinnati

            let mapCenter = initialLocation;
            let currentMarker = null;
            
            map = new google.maps.Map(document.getElementById('map'), {
                center: mapCenter,
                zoom: 12
            });

            // Initialize geocoder
            geocoder = new google.maps.Geocoder();

            // Initialize the search box
            const input = document.getElementById('search-box');
            searchBox = new google.maps.places.SearchBox(input);

            // Bias the search box results towards the current map bounds
            map.addListener('bounds_changed', () => {
                searchBox.setBounds(map.getBounds());
            });

            // Listen for the user's search selection
            searchBox.addListener('places_changed', () => {
                const places = searchBox.getPlaces();
                if (places.length === 0) return;

                const place = places[0]; // Use the first place selected
                if (!place.geometry || !place.geometry.location) return;

                const latitude = place.geometry.location.lat();
                const longitude = place.geometry.location.lng();

                // Remove the old marker if it exists
                if (currentMarker) {
                    currentMarker.setMap(null); // Removes the marker from the map
                }

                // Place a new marker at the new location
                currentMarker = new google.maps.Marker({
                    position: mapCenter,
                    map: map,
                });

                // Center the map on the selected place
                map.setCenter(place.geometry.location);
                map.setZoom(14);

                // Fetch stats for the selected location
                fetchCrimeStats(latitude, longitude);
                console.log(latitude, longitude)
            });

            // Listen for map click events
            map.addListener('click', (event) => {
                const latitude = event.latLng.lat();
                const longitude = event.latLng.lng();

                mapCenter = { lat: latitude, lng: longitude };

                // Use Reverse Geocoding to get the address of the clicked location
                geocoder.geocode({ location: { lat: latitude, lng: longitude } }, (results, status) => {
                    if (status === "OK" && results[0]) {
                        // Update the search box with the formatted address
                        input.value = results[0].formatted_address;
                    } else {
                        console.error("Geocoder failed due to: " + status);
                    }
                });

                // Remove the old marker if it exists
                if (currentMarker) {
                    currentMarker.setMap(null); // Removes the marker from the map
                }

                // Place a new marker at the new location
                currentMarker = new google.maps.Marker({
                    position: mapCenter,
                    map: map,
                });

                map.setCenter(mapCenter);
                map.setZoom(14);

                // Fetch stats for the clicked location
                fetchCrimeStats(latitude, longitude);
                console.log(latitude, longitude)
            });
        }


        function updateSafetyScore(score) {
            // Update the circular score
            const scoreElement = document.getElementById('safetyScore');
            scoreElement.textContent = score;

            // Update the progress bar
            const circleElement = document.getElementById('circleScore');
            const progressElement = document.getElementById('scoreProgress');
            const percentage = Math.min(Math.max(score, 0), 100); // Clamp between 0 and 100
            progressElement.style.width = `${percentage}%`;

            // Update color based on the score
            if (score < 35) {
                circleElement.style.backgroundColor = '#f44336'; // Red for High Risk
                progressElement.style.backgroundColor = '#f44336';
            } else if (score < 70) {
                circleElement.style.backgroundColor = '#ff9800'; // Orange for Moderate
                progressElement.style.backgroundColor = '#ff9800';
            } else {
                circleElement.style.backgroundColor = '#4caf50'; // Green for Very Safe
                progressElement.style.backgroundColor = '#4caf50';
            }
        }

        async function fetchCrimeStats(latitude, longitude) {
            try {
                document.getElementById('totalLast3Months').textContent = "Loading...";
                document.getElementById('totalLast6Months').textContent = "Loading...";
                document.getElementById('totalLast9Months').textContent = "Loading...";
                document.getElementById('totalLast1Year').textContent = "Loading...";

                const response = await fetch(`/Test?handler=CrimeStatsNearby&latitude=${latitude}&longitude=${longitude}`);
                if (!response.ok) {
                    console.error("Error fetching crime stats");
                    return;
                }

                const stats = await response.json();
                console.log("stats: ", stats)

                // Update Safety Score
                updateSafetyScore(stats.safetyScore);
                console.log("score2: ", stats.safetyScore)

                // Update the Total Crime in the UI
                const totalStats = stats.totalCrimeStats;
                console.log(totalStats)
                document.getElementById('totalLast3Months').textContent = totalStats.last3Months;
                document.getElementById('totalLast6Months').textContent = totalStats.last6Months;
                document.getElementById('totalLast9Months').textContent = totalStats.last9Months;
                document.getElementById('totalLast1Year').textContent = totalStats.last1Year;

                // Update crime numbers by type
                const typeStats = stats.crimeTypeStats;
                const tableBody = document.getElementById('typeStatsTable').querySelector('tbody');
                tableBody.innerHTML = ""; // Clear existing rows

                typeStats.forEach(typeStat => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${typeStat.type}</td>
                        <td>${typeStat.last3Months}</td>
                        <td>${typeStat.last6Months}</td>
                        <td>${typeStat.last9Months}</td>
                        <td>${typeStat.last1Year}</td>
                    `;
                    tableBody.appendChild(row);
                });
            } catch (error) {
                console.error("Error fetching crime stats:", error);
            }
        }
    </script>
}


